test_run = require('test_run').new()
---
...
--
-- gh-3893: Replication failure: relay may report that an xlog
-- is corrupted if it it currently being written to.
--
s = box.schema.space.create('test')
---
...
_ = s:create_index('primary')
---
...
-- Deploy a replica.
box.schema.user.grant('guest', 'replication')
---
...
test_run:cmd("create server replica with rpl_master=default, script='replication/replica.lua'")
---
- true
...
test_run:cmd("start server replica")
---
- true
...
-- Setup replica => master channel.
box.cfg{replication = test_run:cmd("eval replica 'return box.cfg.listen'")}
---
...
-- Disable master => replica channel.
test_run:cmd("switch replica")
---
- true
...
replication = box.cfg.replication
---
...
box.cfg{replication = {}}
---
...
test_run:cmd("switch default")
---
- true
...
-- Write some xlogs on the master.
test_run:cmd("setopt delimiter ';'")
---
- true
...
for i = 1, 100 do
    box.begin()
    for j = 1, 100 do
        s:replace{1, require('digest').urandom(1000)}
    end
    box.commit()
end;
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
-- Enable master => replica channel and wait for the replica to catch up.
-- The relay handling replica => master channel on the replica will read
-- an xlog while the applier is writing to it. Although applier and relay
-- are running in different threads, there shouldn't be any rw errors.
test_run:cmd("switch replica")
---
- true
...
box.cfg{replication = replication}
---
...
box.info.replication[1].downstream.status ~= 'stopped' or box.info
---
- true
...
test_run:cmd("switch default")
---
- true
...
-- Cleanup.
box.cfg{replication = {}}
---
...
test_run:cmd("stop server replica")
---
- true
...
test_run:cmd("cleanup server replica")
---
- true
...
test_run:cmd("delete server replica")
---
- true
...
test_run:cleanup_cluster()
---
...
box.schema.user.revoke('guest', 'replication')
---
...
s:drop()
---
...
