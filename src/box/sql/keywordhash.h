/***** This file contains automatically generated code ******
**
** The code in this file has been automatically generated by
**
**   sqlite/tool/mkkeywordhash.c
**
** The code in this file implements a function that determines whether
** or not a given identifier is really an SQL keyword.  The same thing
** might be implemented more directly using a hand-written hash table.
** But by using this automatically generated code, the size of the code
** is substantially reduced.  This is important for embedded applications
** on platforms with limited memory.
*/
/* Hash score: 293 */
static int keywordCode(const char *z, int n, int *pType, bool *pFlag){
  /* zText[] encodes 1239 bytes of keywords in 808 bytes */
  /*   BEFOREIGNOREGEXPLAINOUTERELEASENSITIVEACHARACTERAISELECTABLE       */
  /*   AVELSEIFETCHECKEYCURRENT_DATETIMENDECIMALTERANGETHENATURALIKE      */
  /*   SCAPEXCEPTRUNCATEXTRANSACTIONOTRIGGEREALIMITERATEXISTSAVEPOINT     */
  /*   EGEREFERENCESMALLINTERSECTUPDATEVARCHARESIGNALEFTCASE              */
  /*   CONSTRAINTOFFSETUNIQUERYBEGINSTEADDECLAREVOKEBETWEENULL            */
  /*   OCALTIMESTAMPARTIALOOPLANALYZECASCADEFERRABLECASTARTCOLLATE        */
  /*   COMMITCREATECURSORDEREADSIMPLEDELETEDESCRIBEDOUBLEGROUPRAGMA       */
  /*   TCHAVINGRANTIMMEDIATEJOINDEXEDEFAULTPROCEDURECURSIVEVALUES         */
  /*   PECIFICALLWHERENAMEWHILEWITHABORTAFTEREPEATANDEFERREDENSE_RANK     */
  /*   AUTOINCREMENTBLOBINARYCOLUMNUMERICONDITIONCONFLICTCONNECTCROSS     */
  /*   QLCURRENT_TIMESTAMPARTITIONCURRENT_USEREPLACEDETERMINISTIC         */
  /*   DISTINCTDROPRECISIONFAILFLOATFROMFULLFUNCTIONINNERESTRICT          */
  /*   INSENSITIVEINSERTOVERETURNRIGHTROLLBACKROWSYSTEMROW_NUMBER         */
  /*   UNIONUSINGVIEWHENEVERANYBYINITIALLYPRIMARY                         */
  static const char zText[807] = {
    'B','E','F','O','R','E','I','G','N','O','R','E','G','E','X','P','L','A',
    'I','N','O','U','T','E','R','E','L','E','A','S','E','N','S','I','T','I',
    'V','E','A','C','H','A','R','A','C','T','E','R','A','I','S','E','L','E',
    'C','T','A','B','L','E','A','V','E','L','S','E','I','F','E','T','C','H',
    'E','C','K','E','Y','C','U','R','R','E','N','T','_','D','A','T','E','T',
    'I','M','E','N','D','E','C','I','M','A','L','T','E','R','A','N','G','E',
    'T','H','E','N','A','T','U','R','A','L','I','K','E','S','C','A','P','E',
    'X','C','E','P','T','R','U','N','C','A','T','E','X','T','R','A','N','S',
    'A','C','T','I','O','N','O','T','R','I','G','G','E','R','E','A','L','I',
    'M','I','T','E','R','A','T','E','X','I','S','T','S','A','V','E','P','O',
    'I','N','T','E','G','E','R','E','F','E','R','E','N','C','E','S','M','A',
    'L','L','I','N','T','E','R','S','E','C','T','U','P','D','A','T','E','V',
    'A','R','C','H','A','R','E','S','I','G','N','A','L','E','F','T','C','A',
    'S','E','C','O','N','S','T','R','A','I','N','T','O','F','F','S','E','T',
    'U','N','I','Q','U','E','R','Y','B','E','G','I','N','S','T','E','A','D',
    'D','E','C','L','A','R','E','V','O','K','E','B','E','T','W','E','E','N',
    'U','L','L','O','C','A','L','T','I','M','E','S','T','A','M','P','A','R',
    'T','I','A','L','O','O','P','L','A','N','A','L','Y','Z','E','C','A','S',
    'C','A','D','E','F','E','R','R','A','B','L','E','C','A','S','T','A','R',
    'T','C','O','L','L','A','T','E','C','O','M','M','I','T','C','R','E','A',
    'T','E','C','U','R','S','O','R','D','E','R','E','A','D','S','I','M','P',
    'L','E','D','E','L','E','T','E','D','E','S','C','R','I','B','E','D','O',
    'U','B','L','E','G','R','O','U','P','R','A','G','M','A','T','C','H','A',
    'V','I','N','G','R','A','N','T','I','M','M','E','D','I','A','T','E','J',
    'O','I','N','D','E','X','E','D','E','F','A','U','L','T','P','R','O','C',
    'E','D','U','R','E','C','U','R','S','I','V','E','V','A','L','U','E','S',
    'P','E','C','I','F','I','C','A','L','L','W','H','E','R','E','N','A','M',
    'E','W','H','I','L','E','W','I','T','H','A','B','O','R','T','A','F','T',
    'E','R','E','P','E','A','T','A','N','D','E','F','E','R','R','E','D','E',
    'N','S','E','_','R','A','N','K','A','U','T','O','I','N','C','R','E','M',
    'E','N','T','B','L','O','B','I','N','A','R','Y','C','O','L','U','M','N',
    'U','M','E','R','I','C','O','N','D','I','T','I','O','N','C','O','N','F',
    'L','I','C','T','C','O','N','N','E','C','T','C','R','O','S','S','Q','L',
    'C','U','R','R','E','N','T','_','T','I','M','E','S','T','A','M','P','A',
    'R','T','I','T','I','O','N','C','U','R','R','E','N','T','_','U','S','E',
    'R','E','P','L','A','C','E','D','E','T','E','R','M','I','N','I','S','T',
    'I','C','D','I','S','T','I','N','C','T','D','R','O','P','R','E','C','I',
    'S','I','O','N','F','A','I','L','F','L','O','A','T','F','R','O','M','F',
    'U','L','L','F','U','N','C','T','I','O','N','I','N','N','E','R','E','S',
    'T','R','I','C','T','I','N','S','E','N','S','I','T','I','V','E','I','N',
    'S','E','R','T','O','V','E','R','E','T','U','R','N','R','I','G','H','T',
    'R','O','L','L','B','A','C','K','R','O','W','S','Y','S','T','E','M','R',
    'O','W','_','N','U','M','B','E','R','U','N','I','O','N','U','S','I','N',
    'G','V','I','E','W','H','E','N','E','V','E','R','A','N','Y','B','Y','I',
    'N','I','T','I','A','L','L','Y','P','R','I','M','A','R','Y',
  };
  static const unsigned short aHash[128] = {
     157, 163, 172, 149, 161,   0, 142, 111,  47, 101,   0, 136,  66,
     165,  81, 106,   0, 162, 173, 102, 166, 164, 131,   0,  54,  51,
      21, 169, 156,   0,  35, 127,  22,  13,   0,   0,  88,  90,   0,
      61,  15,   0, 128, 122, 178,   0, 167, 139,   0,   0,   0,   0,
     144,  85,   0,  96,  73, 171,   0,  30,   0,  97,   0,  23, 130,
     151,   0, 177, 148, 103, 176,  70,  43, 107,   0, 108, 114, 138,
      39, 132, 135,   0,   0,  31,  86, 126, 141, 137, 153,   8, 154,
     152,  91, 119,  17,  14, 143, 175,  33,  10, 170, 129, 109,  45,
      60,  48, 158,   0, 174, 112, 160,  92,   0,  55,   0,   0,  44,
      52, 117, 155,  76,   0,  20,  63, 168,  68, 159, 146,
  };
  static const unsigned short aNext[178] = {
       0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,
       0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
       0,   0,   0,  29,  16,   0,  18,   0,   7,   0,   0,   0,   0,
       6,   0,   0,  25,   0,   0,   0,  41,   0,   0,   0,   0,   0,
      37,   0,   0,   9,   0,   0,   0,   4,   0,   0,  36,   0,   0,
      49,   0,  56,   0,   0,   0,   0,   0,   0,   0,   0,   0,  19,
       0,   0,  59,   0,   0,   0,   0,   0,   0,  83,   0,  24,   0,
      11,   0,   0,   0,  28,  38,  95,   0,  94,  57,  67,  75,   0,
      65,  71,  99,  50, 105,  77,   0,  64,  93,   0,   0,  74, 115,
      12,   0,  32,   0,  72,   0,   0,   5,   2,   0,  69, 100,   0,
      78,   0,   0, 120,   0,   0, 134,   3,  27,  79,  89,   0, 118,
     123,   0,   0,  26, 147, 140, 133,   0, 124, 150,  62,  40,   0,
       0,   0,   0, 110,  58,  42,  46,  87, 125, 113,  84,   0,  53,
      80,  98, 104, 121, 145, 116,   0,  34,  82,
  };
  static const unsigned char aLen[178] = {
       6,   7,   3,   2,   6,   2,   6,   7,   5,   3,   5,   7,  10,
       2,   4,   9,   4,   5,   6,   5,   5,   6,   4,   5,   5,   3,
      12,   8,   4,   3,   7,   5,   5,   3,   4,   7,   4,   6,   6,
       8,   4,  11,   6,   2,   3,   7,   4,   5,   7,   6,   9,   7,
      10,   8,   9,   6,   7,   8,   6,   4,   4,  10,   3,   4,   6,
       2,   3,   6,   5,   5,   7,   3,   7,   6,   7,   4,  14,   9,
       7,   4,   4,   7,   7,   3,  10,   4,   5,   7,   6,   6,   6,
       5,   5,   6,   6,   8,   4,   6,   5,   6,   5,   6,   5,   9,
       4,   7,   5,   7,   9,   9,   6,   8,   2,   4,   5,   6,   5,
       4,   5,   5,   6,   3,   8,  10,   4,  13,   2,   4,   6,   6,
       7,   9,   8,   7,   5,   3,   7,  17,  12,   9,  12,   4,   7,
      13,   2,   2,   8,   4,   9,   4,   5,   4,   4,   8,   5,   8,
      11,   9,   6,   4,   6,   5,   8,   4,   6,  10,   3,   3,   5,
       5,   4,   8,   4,   3,   2,   9,   3,   7,
  };
  static const unsigned short int aOffset[178] = {
       0,   2,   2,   3,   6,   8,  10,  13,  18,  20,  20,  24,  28,
      28,  37,  39,  39,  47,  50,  55,  58,  62,  62,  67,  70,  74,
      77,  85,  85,  92,  94,  99, 103, 106, 108, 111, 117, 120, 125,
     130, 136, 139, 144, 148, 149, 151, 157, 160, 163, 169, 174, 180,
     186, 195, 200, 209, 215, 221, 223, 228, 232, 236, 243, 243, 246,
     246, 249, 252, 255, 260, 263, 268, 270, 275, 281, 287, 290, 290,
     303, 309, 312, 314, 321, 322, 326, 336, 338, 343, 350, 356, 362,
     366, 370, 374, 380, 386, 386, 394, 400, 404, 408, 412, 417, 422,
     431, 433, 433, 439, 446, 453, 462, 467, 471, 474, 478, 481, 487,
     492, 496, 501, 505, 511, 513, 520, 526, 530, 532, 543, 546, 552,
     557, 563, 572, 580, 587, 591, 594, 594, 594, 610, 619, 627, 630,
     637, 643, 645, 650, 658, 661, 670, 674, 679, 683, 687, 695, 699,
     707, 709, 718, 724, 727, 733, 738, 746, 749, 755, 755, 759, 765,
     770, 775, 778, 778, 786, 789, 791, 796, 800,
  };
  static const unsigned char aCode[178] = {
    TK_BEFORE,     TK_FOREIGN,    TK_FOR,        TK_OR,         TK_IGNORE,     
    TK_NO,         TK_LIKE_KW,    TK_EXPLAIN,    TK_STANDARD,   TK_STANDARD,   
    TK_JOIN_KW,    TK_RELEASE,    TK_STANDARD,   TK_AS,         TK_EACH,       
    TK_ID,         TK_CHAR,       TK_RAISE,      TK_SELECT,     TK_TABLE,      
    TK_STANDARD,   TK_STANDARD,   TK_ELSE,       TK_STANDARD,   TK_CHECK,      
    TK_KEY,        TK_CTIME_KW,   TK_DATETIME,   TK_DATE,       TK_END,        
    TK_DECIMAL,    TK_ALTER,      TK_STANDARD,   TK_STANDARD,   TK_THEN,       
    TK_JOIN_KW,    TK_LIKE_KW,    TK_ESCAPE,     TK_EXCEPT,     TK_TRUNCATE,   
    TK_TEXT,       TK_TRANSACTION,TK_ACTION,     TK_ON,         TK_NOT,        
    TK_TRIGGER,    TK_REAL,       TK_LIMIT,      TK_STANDARD,   TK_EXISTS,     
    TK_SAVEPOINT,  TK_INTEGER,    TK_REFERENCES, TK_ID,         TK_INTERSECT,  
    TK_UPDATE,     TK_VARCHAR,    TK_STANDARD,   TK_STANDARD,   TK_JOIN_KW,    
    TK_CASE,       TK_CONSTRAINT, TK_INT,        TK_INTO,       TK_OFFSET,     
    TK_OF,         TK_SET,        TK_UNIQUE,     TK_QUERY,      TK_BEGIN,      
    TK_INSTEAD,    TK_ADD,        TK_STANDARD,   TK_STANDARD,   TK_BETWEEN,    
    TK_NULL,       TK_STANDARD,   TK_STANDARD,   TK_PARTIAL,    TK_STANDARD,   
    TK_PLAN,       TK_ANALYZE,    TK_CASCADE,    TK_ASC,        TK_DEFERRABLE, 
    TK_CAST,       TK_START,      TK_COLLATE,    TK_COMMIT,     TK_CREATE,     
    TK_STANDARD,   TK_ORDER,      TK_STANDARD,   TK_SIMPLE,     TK_DELETE,     
    TK_STANDARD,   TK_DESC,       TK_DOUBLE,     TK_GROUP,      TK_PRAGMA,     
    TK_MATCH,      TK_HAVING,     TK_STANDARD,   TK_IMMEDIATE,  TK_JOIN,       
    TK_INDEXED,    TK_INDEX,      TK_DEFAULT,    TK_STANDARD,   TK_RECURSIVE,  
    TK_VALUES,     TK_STANDARD,   TK_IF,         TK_STANDARD,   TK_WHERE,      
    TK_RENAME,     TK_STANDARD,   TK_WITH,       TK_ABORT,      TK_AFTER,      
    TK_STANDARD,   TK_AND,        TK_DEFERRED,   TK_STANDARD,   TK_STANDARD,   
    TK_AUTOINCR,   TK_TO,         TK_BLOB,       TK_ID,         TK_STANDARD,   
    TK_NUMERIC,    TK_STANDARD,   TK_CONFLICT,   TK_STANDARD,   TK_JOIN_KW,    
    TK_STANDARD,   TK_STANDARD,   TK_CTIME_KW,   TK_CTIME_KW,   TK_STANDARD,   
    TK_STANDARD,   TK_STANDARD,   TK_REPLACE,    TK_STANDARD,   TK_IN,         
    TK_IS,         TK_DISTINCT,   TK_DROP,       TK_STANDARD,   TK_FAIL,       
    TK_FLOAT,      TK_FROM,       TK_FULL,       TK_STANDARD,   TK_JOIN_KW,    
    TK_RESTRICT,   TK_STANDARD,   TK_STANDARD,   TK_INSERT,     TK_STANDARD,   
    TK_STANDARD,   TK_JOIN_KW,    TK_ROLLBACK,   TK_STANDARD,   TK_STANDARD,   
    TK_STANDARD,   TK_ROW,        TK_NUM,        TK_UNION,      TK_USING,      
    TK_VIEW,       TK_STANDARD,   TK_WHEN,       TK_STANDARD,   TK_BY,         
    TK_INITIALLY,  TK_ALL,        TK_PRIMARY,    
  };
  static const bool aFlag[178] = {
    false,         true,          true,          true,          false,         
    false,         false,         true,          true,          true,          
    true,          true,          true,          true,          true,          
    true,          true,          false,         true,          true,          
    true,          true,          true,          true,          true,          
    false,         true,          true,          true,          true,          
    true,          true,          true,          true,          true,          
    true,          true,          true,          true,          true,          
    true,          true,          false,         true,          true,          
    true,          true,          false,         true,          true,          
    true,          true,          true,          true,          true,          
    true,          true,          true,          true,          true,          
    true,          true,          true,          true,          false,         
    true,          true,          true,          false,         true,          
    false,         false,         true,          true,          true,          
    true,          true,          true,          true,          true,          
    false,         true,          false,         true,          false,         
    false,         true,          true,          true,          true,          
    true,          true,          true,          true,          true,          
    true,          true,          true,          true,          true,          
    true,          true,          true,          true,          true,          
    false,         true,          true,          true,          true,          
    true,          true,          true,          true,          true,          
    true,          true,          true,          false,         false,         
    true,          true,          false,         true,          true,          
    false,         true,          true,          true,          true,          
    true,          true,          false,         true,          true,          
    true,          true,          true,          true,          true,          
    true,          true,          true,          true,          true,          
    true,          true,          true,          true,          false,         
    true,          true,          true,          true,          true,          
    false,         true,          true,          true,          true,          
    true,          true,          true,          true,          true,          
    true,          true,          true,          true,          true,          
    true,          true,          true,          true,          true,          
    false,         true,          true,          
  };
  int i, j;
  const char *zKW;
  if( n>=2 ){
    i = ((charMap(z[0])*4) ^ (charMap(z[n-1])*3) ^ n) % 128;
    for(i=((int)aHash[i])-1; i>=0; i=((int)aNext[i])-1){
      if( aLen[i]!=n ) continue;
      j = 0;
      zKW = &zText[aOffset[i]];
      while( j<n && (z[j]&~0x20)==zKW[j] ){ j++; }
      if( j<n ) continue;
      testcase( i==0 ); /* BEFORE */
      testcase( i==1 ); /* FOREIGN */
      testcase( i==2 ); /* FOR */
      testcase( i==3 ); /* OR */
      testcase( i==4 ); /* IGNORE */
      testcase( i==5 ); /* NO */
      testcase( i==6 ); /* REGEXP */
      testcase( i==7 ); /* EXPLAIN */
      testcase( i==8 ); /* INOUT */
      testcase( i==9 ); /* OUT */
      testcase( i==10 ); /* OUTER */
      testcase( i==11 ); /* RELEASE */
      testcase( i==12 ); /* ASENSITIVE */
      testcase( i==13 ); /* AS */
      testcase( i==14 ); /* EACH */
      testcase( i==15 ); /* CHARACTER */
      testcase( i==16 ); /* CHAR */
      testcase( i==17 ); /* RAISE */
      testcase( i==18 ); /* SELECT */
      testcase( i==19 ); /* TABLE */
      testcase( i==20 ); /* LEAVE */
      testcase( i==21 ); /* ELSEIF */
      testcase( i==22 ); /* ELSE */
      testcase( i==23 ); /* FETCH */
      testcase( i==24 ); /* CHECK */
      testcase( i==25 ); /* KEY */
      testcase( i==26 ); /* CURRENT_DATE */
      testcase( i==27 ); /* DATETIME */
      testcase( i==28 ); /* DATE */
      testcase( i==29 ); /* END */
      testcase( i==30 ); /* DECIMAL */
      testcase( i==31 ); /* ALTER */
      testcase( i==32 ); /* RANGE */
      testcase( i==33 ); /* GET */
      testcase( i==34 ); /* THEN */
      testcase( i==35 ); /* NATURAL */
      testcase( i==36 ); /* LIKE */
      testcase( i==37 ); /* ESCAPE */
      testcase( i==38 ); /* EXCEPT */
      testcase( i==39 ); /* TRUNCATE */
      testcase( i==40 ); /* TEXT */
      testcase( i==41 ); /* TRANSACTION */
      testcase( i==42 ); /* ACTION */
      testcase( i==43 ); /* ON */
      testcase( i==44 ); /* NOT */
      testcase( i==45 ); /* TRIGGER */
      testcase( i==46 ); /* REAL */
      testcase( i==47 ); /* LIMIT */
      testcase( i==48 ); /* ITERATE */
      testcase( i==49 ); /* EXISTS */
      testcase( i==50 ); /* SAVEPOINT */
      testcase( i==51 ); /* INTEGER */
      testcase( i==52 ); /* REFERENCES */
      testcase( i==53 ); /* SMALLINT */
      testcase( i==54 ); /* INTERSECT */
      testcase( i==55 ); /* UPDATE */
      testcase( i==56 ); /* VARCHAR */
      testcase( i==57 ); /* RESIGNAL */
      testcase( i==58 ); /* SIGNAL */
      testcase( i==59 ); /* LEFT */
      testcase( i==60 ); /* CASE */
      testcase( i==61 ); /* CONSTRAINT */
      testcase( i==62 ); /* INT */
      testcase( i==63 ); /* INTO */
      testcase( i==64 ); /* OFFSET */
      testcase( i==65 ); /* OF */
      testcase( i==66 ); /* SET */
      testcase( i==67 ); /* UNIQUE */
      testcase( i==68 ); /* QUERY */
      testcase( i==69 ); /* BEGIN */
      testcase( i==70 ); /* INSTEAD */
      testcase( i==71 ); /* ADD */
      testcase( i==72 ); /* DECLARE */
      testcase( i==73 ); /* REVOKE */
      testcase( i==74 ); /* BETWEEN */
      testcase( i==75 ); /* NULL */
      testcase( i==76 ); /* LOCALTIMESTAMP */
      testcase( i==77 ); /* LOCALTIME */
      testcase( i==78 ); /* PARTIAL */
      testcase( i==79 ); /* LOOP */
      testcase( i==80 ); /* PLAN */
      testcase( i==81 ); /* ANALYZE */
      testcase( i==82 ); /* CASCADE */
      testcase( i==83 ); /* ASC */
      testcase( i==84 ); /* DEFERRABLE */
      testcase( i==85 ); /* CAST */
      testcase( i==86 ); /* START */
      testcase( i==87 ); /* COLLATE */
      testcase( i==88 ); /* COMMIT */
      testcase( i==89 ); /* CREATE */
      testcase( i==90 ); /* CURSOR */
      testcase( i==91 ); /* ORDER */
      testcase( i==92 ); /* READS */
      testcase( i==93 ); /* SIMPLE */
      testcase( i==94 ); /* DELETE */
      testcase( i==95 ); /* DESCRIBE */
      testcase( i==96 ); /* DESC */
      testcase( i==97 ); /* DOUBLE */
      testcase( i==98 ); /* GROUP */
      testcase( i==99 ); /* PRAGMA */
      testcase( i==100 ); /* MATCH */
      testcase( i==101 ); /* HAVING */
      testcase( i==102 ); /* GRANT */
      testcase( i==103 ); /* IMMEDIATE */
      testcase( i==104 ); /* JOIN */
      testcase( i==105 ); /* INDEXED */
      testcase( i==106 ); /* INDEX */
      testcase( i==107 ); /* DEFAULT */
      testcase( i==108 ); /* PROCEDURE */
      testcase( i==109 ); /* RECURSIVE */
      testcase( i==110 ); /* VALUES */
      testcase( i==111 ); /* SPECIFIC */
      testcase( i==112 ); /* IF */
      testcase( i==113 ); /* CALL */
      testcase( i==114 ); /* WHERE */
      testcase( i==115 ); /* RENAME */
      testcase( i==116 ); /* WHILE */
      testcase( i==117 ); /* WITH */
      testcase( i==118 ); /* ABORT */
      testcase( i==119 ); /* AFTER */
      testcase( i==120 ); /* REPEAT */
      testcase( i==121 ); /* AND */
      testcase( i==122 ); /* DEFERRED */
      testcase( i==123 ); /* DENSE_RANK */
      testcase( i==124 ); /* RANK */
      testcase( i==125 ); /* AUTOINCREMENT */
      testcase( i==126 ); /* TO */
      testcase( i==127 ); /* BLOB */
      testcase( i==128 ); /* BINARY */
      testcase( i==129 ); /* COLUMN */
      testcase( i==130 ); /* NUMERIC */
      testcase( i==131 ); /* CONDITION */
      testcase( i==132 ); /* CONFLICT */
      testcase( i==133 ); /* CONNECT */
      testcase( i==134 ); /* CROSS */
      testcase( i==135 ); /* SQL */
      testcase( i==136 ); /* CURRENT */
      testcase( i==137 ); /* CURRENT_TIMESTAMP */
      testcase( i==138 ); /* CURRENT_TIME */
      testcase( i==139 ); /* PARTITION */
      testcase( i==140 ); /* CURRENT_USER */
      testcase( i==141 ); /* USER */
      testcase( i==142 ); /* REPLACE */
      testcase( i==143 ); /* DETERMINISTIC */
      testcase( i==144 ); /* IN */
      testcase( i==145 ); /* IS */
      testcase( i==146 ); /* DISTINCT */
      testcase( i==147 ); /* DROP */
      testcase( i==148 ); /* PRECISION */
      testcase( i==149 ); /* FAIL */
      testcase( i==150 ); /* FLOAT */
      testcase( i==151 ); /* FROM */
      testcase( i==152 ); /* FULL */
      testcase( i==153 ); /* FUNCTION */
      testcase( i==154 ); /* INNER */
      testcase( i==155 ); /* RESTRICT */
      testcase( i==156 ); /* INSENSITIVE */
      testcase( i==157 ); /* SENSITIVE */
      testcase( i==158 ); /* INSERT */
      testcase( i==159 ); /* OVER */
      testcase( i==160 ); /* RETURN */
      testcase( i==161 ); /* RIGHT */
      testcase( i==162 ); /* ROLLBACK */
      testcase( i==163 ); /* ROWS */
      testcase( i==164 ); /* SYSTEM */
      testcase( i==165 ); /* ROW_NUMBER */
      testcase( i==166 ); /* ROW */
      testcase( i==167 ); /* NUM */
      testcase( i==168 ); /* UNION */
      testcase( i==169 ); /* USING */
      testcase( i==170 ); /* VIEW */
      testcase( i==171 ); /* WHENEVER */
      testcase( i==172 ); /* WHEN */
      testcase( i==173 ); /* ANY */
      testcase( i==174 ); /* BY */
      testcase( i==175 ); /* INITIALLY */
      testcase( i==176 ); /* ALL */
      testcase( i==177 ); /* PRIMARY */
      *pType = aCode[i];
      if (pFlag) {
        *pFlag = aFlag[i];
      }
      break;
    }
  }
  return n;
}
int sqlite3KeywordCode(const unsigned char *z, int n){
  int id = TK_ID;
  keywordCode((char*)z, n, &id, NULL);
  return id;
}
#define SQLITE_N_KEYWORD 178
